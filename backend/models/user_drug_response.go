// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDrugResponse user drug response
//
// swagger:model UserDrugResponse
type UserDrugResponse struct {

	// description
	Description string `json:"description,omitempty"`

	// dosage frequency
	DosageFrequency uint64 `json:"dosage_frequency,omitempty"`

	// drug category description
	DrugCategoryDescription string `json:"drug_category_description,omitempty"`

	// drug category id
	DrugCategoryID uint64 `json:"drug_category_id,omitempty"`

	// drug category name
	DrugCategoryName string `json:"drug_category_name,omitempty"`

	// drug id
	DrugID uint64 `json:"drug_id,omitempty"`

	// end date
	// Format: date
	EndDate strfmt.Date `json:"end_date,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// is fasting
	IsFasting bool `json:"is_fasting,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// side effects
	SideEffects string `json:"side_effects,omitempty"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"start_date,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// warnings
	Warnings string `json:"warnings,omitempty"`
}

// Validate validates this user drug response
func (m *UserDrugResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDrugResponse) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserDrugResponse) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user drug response based on context it is used
func (m *UserDrugResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserDrugResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDrugResponse) UnmarshalBinary(b []byte) error {
	var res UserDrugResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
